esphome:
  name: autocat
  friendly_name: AutoCAT

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # For DHCP comment next lines
  manual_ip:
    static_ip: 192.168.1.41 
    gateway: 192.168.1.1     
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Autocat Fallback Hotspot"
    password: "pJXy1EEFVl2Q"

servo:
  - id: impeller_servo
    output: gpio_6
    min_level: 0.025  # Equivalent to 500 µs
    max_level: 0.125  # Equivalent to 2500 µs
    auto_detach_time: 5s
    transition_length: 2s
    restore: True

output:
  - platform: ledc
    pin: GPIO6
    id: gpio_6
    frequency: 50 Hz # MUST BE 50Hz

number:
  - platform: template
    id: servo_control
    # Uncomment for public access from HA
    # name: "Servo Control"
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    restore_value: True
    optimistic: True
    set_action:
      then:
        - servo.write:
            id: impeller_servo
            level: !lambda 'return x / 100.0;'
  
  # Min weight. Can be change in HA
  - platform: template
    id: min_weight
    name: "Min weight"
    min_value: 0.0
    max_value: 0.5
    step: 0.01
    restore_value: true
    initial_value: 0.1  # Default value
    optimistic: true

  # Check interval. Time between reads of weight
  - platform: template
    id: read_interval
    name: "Read interval (min)"
    min_value: 5
    max_value: 180
    step: 5
    restore_value: true
    initial_value: 5
    optimistic: true


# Serve Button
button:
  - platform: template
    name: "Feed"
    on_press:
      then:
        - lambda: |-
            int current_value = id(servo_control).state;
            int target_value = (current_value >= 0) ? -100 : 100;
            id(servo_control).make_call().set_value(target_value).perform();
        - delay: 2s
        - component.update: feed_weight

# Script seed
script:
  - id: serve_feed
    mode: restart
    then:
      - logger.log: "Start serving feed..."
      - while:
          condition:
            lambda: 'return id(feed_weight).state < id(min_weight).state;'
          then:
            - logger.log: "Serving..."
            - lambda: |-
                int current_value = id(servo_control).state;
                int target_value = (current_value >= 0) ? -100 : 100;
                id(servo_control).make_call().set_value(target_value).perform();
            - delay: 4s
            - component.update: feed_weight

sensor:
  - platform: hx711
    name: "Weight"
    id: feed_weight
    dout_pin: GPIO7
    clk_pin: GPIO8
    gain: 128
    # update_interval: 1s // For update HA value. Increase historical file size.
    accuracy_decimals: 2
    unit_of_measurement: kg
    filters:
      - calibrate_linear:
          - 27200 -> 0  # Min. value readed with zero weight.
          - 893600 -> 1 # Max. value readed with full weight.

# loop every minute, needed for dinamic change interval.
interval:
  - interval: 1min
    then:
      - lambda: |-
          static int minute_counter = 0;
          minute_counter++;
          if (minute_counter >= int(id(read_interval).state)) {
            minute_counter = 0;
            id(feed_weight).update();
            ESP_LOGI("interval", "Checking weight after %d minutes, weight %.2f", int(id(read_interval).state), id(feed_weight).state);
            if (id(feed_weight).state < id(min_weight).state) {
              ESP_LOGI("interval", "Weight under min. Must start serving feed.");
              id(serve_feed).execute();
            }
          }